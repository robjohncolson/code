#!/usr/bin/env node

/**
 * curriculum_splitter.js - Curriculum Bundle Splitter
 * Part of AP Statistics Consensus Quiz
 *
 * Splits the large curriculum.js (1.7MB) into per-unit chunks for lazy loading.
 * Run with: node js/curriculum_splitter.js
 */

const fs = require('fs');
const path = require('path');

// Configuration
const INPUT_FILE = path.join(__dirname, '../data/curriculum.js');
const OUTPUT_DIR = path.join(__dirname, '../data');
const MANIFEST_FILE = path.join(OUTPUT_DIR, 'curriculum_manifest.json');

console.log('📚 Curriculum Splitter Starting...\n');

// Read and parse curriculum.js
console.log(`Reading ${INPUT_FILE}...`);
const curriculumContent = fs.readFileSync(INPUT_FILE, 'utf8');

// Extract EMBEDDED_CURRICULUM array
// Find the start of the array
const startMatch = curriculumContent.match(/const EMBEDDED_CURRICULUM = \[/);
if (!startMatch) {
    console.error('❌ Error: Could not find EMBEDDED_CURRICULUM in curriculum.js');
    process.exit(1);
}

// Find the matching closing bracket
// We'll use a simpler approach: evaluate the file in a sandboxed context
let curriculum;
try {
    // Create a function that defines and returns EMBEDDED_CURRICULUM
    const wrappedCode = curriculumContent + '\nreturn EMBEDDED_CURRICULUM;';
    const func = new Function(wrappedCode);
    curriculum = func();
    console.log(`✅ Parsed ${curriculum.length} total questions\n`);
} catch (error) {
    console.error('❌ Error parsing curriculum:', error.message);
    console.error('Try using: const curriculum = require("./data/curriculum.js");');
    process.exit(1);
}

// Skip the JSON.parse since we already have the data
/*
const curriculumJSON = match[1];
let curriculum;

*/

// Group questions by unit
const unitGroups = {};
const stats = {
    totalQuestions: curriculum.length,
    units: {},
    unmatched: []
};

curriculum.forEach((question, index) => {
    // Extract unit number from question ID (e.g., "U1-L2-Q01" → "1")
    const match = question.id?.match(/^U(\d+)-/);

    if (match) {
        const unitNum = match[1];

        if (!unitGroups[unitNum]) {
            unitGroups[unitNum] = [];
            stats.units[unitNum] = {
                count: 0,
                size: 0,
                questions: []
            };
        }

        unitGroups[unitNum].push(question);
        stats.units[unitNum].count++;
        stats.units[unitNum].questions.push(question.id);
    } else {
        console.warn(`⚠️  Question ${index} has no valid unit ID:`, question.id);
        stats.unmatched.push(question.id || `question-${index}`);
    }
});

console.log('📊 Unit Distribution:');
Object.keys(unitGroups).sort((a, b) => parseInt(a) - parseInt(b)).forEach(unitNum => {
    console.log(`   Unit ${unitNum}: ${stats.units[unitNum].count} questions`);
});

if (stats.unmatched.length > 0) {
    console.log(`\n⚠️  ${stats.unmatched.length} unmatched questions`);
}

console.log('\n');

// Create manifest
const manifest = {
    version: Date.now(),
    generated: new Date().toISOString(),
    units: {},
    metadata: {
        totalQuestions: stats.totalQuestions,
        totalUnits: Object.keys(unitGroups).length,
        splitterVersion: '1.0.0'
    }
};

// Write unit files
const unitNumbers = Object.keys(unitGroups).sort((a, b) => parseInt(a) - parseInt(b));

unitNumbers.forEach(unitNum => {
    const questions = unitGroups[unitNum];
    const filename = `curriculum_u${unitNum}.js`;
    const filepath = path.join(OUTPUT_DIR, filename);

    // Generate unit chunk file
    const chunkContent = `/**
 * curriculum_u${unitNum}.js - Unit ${unitNum} Curriculum Chunk
 * Auto-generated by curriculum_splitter.js
 * Generated: ${new Date().toISOString()}
 * Questions: ${questions.length}
 */

// Register curriculum chunk
if (typeof window !== 'undefined') {
    window.curriculumChunks = window.curriculumChunks || {};
    window.curriculumChunks['U${unitNum}'] = ${JSON.stringify(questions, null, 2)};

    console.log('[CurriculumChunk] Loaded Unit ${unitNum}: ${questions.length} questions');
}

// Export for Node.js (testing)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ${JSON.stringify(questions, null, 2)};
}
`;

    // Write file
    fs.writeFileSync(filepath, chunkContent, 'utf8');

    const fileSize = fs.statSync(filepath).size;
    const fileSizeKB = (fileSize / 1024).toFixed(1);
    const gzipEstKB = (fileSize * 0.3 / 1024).toFixed(1); // Est. 70% compression

    console.log(`✅ Created ${filename} (${fileSizeKB} KB, ~${gzipEstKB} KB gzipped)`);

    // Add to manifest
    manifest.units[unitNum] = {
        filename: filename,
        questionCount: questions.length,
        size: fileSize,
        sizeKB: parseFloat(fileSizeKB),
        gzipEstKB: parseFloat(gzipEstKB),
        questions: questions.map(q => q.id)
    };

    stats.units[unitNum].size = fileSize;
});

// Add unmatched questions to a fallback file if any
if (stats.unmatched.length > 0) {
    const filename = 'curriculum_unmatched.js';
    const filepath = path.join(OUTPUT_DIR, filename);
    const unmatchedQuestions = curriculum.filter(q => {
        const match = q.id?.match(/^U(\d+)-/);
        return !match;
    });

    const chunkContent = `/**
 * curriculum_unmatched.js - Unmatched Questions
 * Auto-generated by curriculum_splitter.js
 * Generated: ${new Date().toISOString()}
 * Questions: ${unmatchedQuestions.length}
 */

if (typeof window !== 'undefined') {
    window.curriculumChunks = window.curriculumChunks || {};
    window.curriculumChunks['UNMATCHED'] = ${JSON.stringify(unmatchedQuestions, null, 2)};
}

if (typeof module !== 'undefined' && module.exports) {
    module.exports = ${JSON.stringify(unmatchedQuestions, null, 2)};
}
`;

    fs.writeFileSync(filepath, chunkContent, 'utf8');
    console.log(`⚠️  Created ${filename} for unmatched questions`);
}

// Write manifest
fs.writeFileSync(MANIFEST_FILE, JSON.stringify(manifest, null, 2), 'utf8');
console.log(`\n✅ Created ${path.basename(MANIFEST_FILE)}`);

// Summary statistics
console.log('\n📊 Split Summary:');
console.log('─'.repeat(50));
console.log(`Total Questions:     ${stats.totalQuestions}`);
console.log(`Units Generated:     ${unitNumbers.length}`);
console.log(`Unmatched:           ${stats.unmatched.length}`);

const totalOriginalSize = fs.statSync(INPUT_FILE).size;
const totalChunksSize = Object.values(stats.units).reduce((sum, u) => sum + u.size, 0);
const savings = ((1 - (Math.min(...Object.values(stats.units).map(u => u.size)) / totalOriginalSize)) * 100).toFixed(1);

console.log(`\nOriginal Size:       ${(totalOriginalSize / 1024 / 1024).toFixed(2)} MB`);
console.log(`Total Chunks Size:   ${(totalChunksSize / 1024 / 1024).toFixed(2)} MB`);
console.log(`Smallest Chunk:      ${(Math.min(...Object.values(stats.units).map(u => u.size)) / 1024).toFixed(1)} KB`);
console.log(`Largest Chunk:       ${(Math.max(...Object.values(stats.units).map(u => u.size)) / 1024).toFixed(1)} KB`);
console.log(`Average Chunk:       ${(totalChunksSize / unitNumbers.length / 1024).toFixed(1)} KB`);
console.log(`\nInitial Load Savings: ~${savings}% (load 1 unit vs all units)`);

console.log('\n✅ Curriculum splitting complete!\n');
console.log('Next steps:');
console.log('1. Update index.html to remove <script src="data/curriculum.js">');
console.log('2. Curriculum chunks will be loaded on-demand via curriculum_loader.js');
console.log('3. Test lazy loading with: window.curriculumLoader.loadUnit(1)');
console.log('');
